// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace SubhadraSolutions.Utils.Data.EntityFramework.SqlServer.DbContexts.Audit;

public abstract partial class AbstractAuditLogContext<T> : DbContext where T:DbContext
{
    protected readonly string connectionString;
    protected AbstractAuditLogContext(string connectionString)
    {
        this.connectionString = connectionString;
    }
    protected AbstractAuditLogContext(string connectionString, DbContextOptions<T> options)
        : base(options)
    {
        this.connectionString = connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(this.connectionString);
    }
 
    public virtual DbSet<AuditLog> AuditLog { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.Property(e => e.AuditLogID).ValueGeneratedNever();
            entity.Property(e => e.EventDatePST).HasDefaultValueSql("(getdate())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    public async System.Threading.Tasks.Task<SaveChangesResult> SaveChangesAuditEnabledAsync(string userName)
    {
        Exception exception = null;
        try
        {
            var auditingEntities = new List<EntityState>
                {
                    EntityState.Modified,
                    EntityState.Deleted
                };
            var modifiedEntities = ChangeTracker.Entries().Where(x => auditingEntities.Contains(x.State)).ToList();

            var auditEntries = new List<AuditEntry>();

            foreach (var entity in modifiedEntities)
            {
                var auditEntry = new AuditEntry(entity);
                auditEntry.RecordID = entity.GetPrimaryKeyValues();
                var properties = entity.State == EntityState.Deleted ? entity.OriginalValues.Properties : entity.CurrentValues.Properties;
                auditEntry.EventType = entity.State.ToString();
                foreach (var property in properties)
                {
                    var propertyName = property.Name;
                    switch (entity.State)
                    {
                        case EntityState.Modified:
                            if (!object.Equals(entity.OriginalValues.GetValue<object>(property), entity.CurrentValues.GetValue<object>(property)))
                            {
                                auditEntry.ChangedValues.Add(propertyName);
                            }
                            if (!propertyName.ToLower().Contains("rowversion"))
                            {
                                auditEntry.OldValues.Add(propertyName, entity.OriginalValues.GetValue<object>(property)?.ToString());
                                auditEntry.NewValues.Add(propertyName, entity.CurrentValues.GetValue<object>(property)?.ToString());
                            }
                            break;
                        case EntityState.Added:
                            // To do - Handle identifier columns
                            auditEntry.NewValues.Add(propertyName, entity.CurrentValues.GetValue<object>(property)?.ToString());
                            auditEntry.ChangedValues.Add(propertyName);
                            break;
                        case EntityState.Deleted:
                            if (!propertyName.ToLower().Contains("rowversion"))
                            {
                                auditEntry.OldValues.Add(propertyName, entity.OriginalValues.GetValue<object>(property)?.ToString());
                            }
                            auditEntry.ChangedValues.Add(propertyName);
                            break;
                        default:
                            break;
                    }
                }
                auditEntries.Add(auditEntry);
            }

            List<AuditLog> auditLogs = new List<AuditLog>();

            //  Ignore if oldvalue and newvalue are same.
            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries)
            {
                var auditLog = auditEntry.ToAudit(userName);
                if (!auditLog.OldValues.Equals(auditLog.NewValues))
                {
                    auditLogs.Add(auditLog);
                }
            }

            if (auditLogs.Any())
            {
                AuditLog.AddRange(auditLogs);
            }
        }
        catch (Exception ex)
        {
            exception = ex;
        }

        var numberOfRecordsChanged = await base.SaveChangesAsync();
        return new SaveChangesResult(numberOfRecordsChanged, exception);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}