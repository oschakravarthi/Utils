using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Collections.Generic;
using System.Linq;

namespace SubhadraSolutions.Utils.Data.EntityFramework;

public static class EntityEntryExtensions
{
    public static IEnumerable<string> GetPrimaryKeyNames<T>(this DbContext dbContext, T entity)
    {
        return from p in dbContext.GetPrimaryKeyProperties(entity)
               select p.Name;
    }

    public static IEnumerable<object> GetPrimaryKeyValues<T>(this DbContext dbContext, T entity)
    {
        return from p in dbContext.GetPrimaryKeyProperties(entity)
               select entity.GetPropertyValue(p.Name);
    }

    private static IReadOnlyList<IProperty> GetPrimaryKeyProperties<T>(this DbContext dbContext, T entity)
    {
        return dbContext.Model.FindEntityType(typeof(T)).FindPrimaryKey().Properties;
    }

    private static object GetPropertyValue<T>(this T entity, string name)
    {
        return entity.GetType().GetProperty(name).GetValue(entity, null);
    }

    public static string GetPrimaryKeyValues(this EntityEntry entry)
    {
        var objectStateEntry = entry.Context.GetPrimaryKeyNames(entry.Entity).ToList();

        if (objectStateEntry.Count > 0)
        {
            return objectStateEntry[0];
        }
        else
        {
            // If Primary key is autogenerated at this stage this value would be 0
            return "0";
        }
    }
}