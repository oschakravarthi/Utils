@using Newtonsoft.Json.Schema
@using Microsoft.AspNetCore.Components.Forms

@inherits AbstractSmartComponent

@foreach (var property in Schema.Properties)
{
    if (!this.Model.ContainsKey(property.Key))
    {
        this.Model.Add(property.Key, null);
    }
    var valueSchema = property.Value;
    switch (valueSchema.Type)
    {
        case JSchemaType.Array:
            if (valueSchema.Items.Count > 0)
            {
                foreach (var child in valueSchema.Items)
                {
                    var childPayload = new Dictionary<string, object>();
                    this.Model[property.Key] = childPayload;
                    <DynamicInputFormContent Schema="@child" Model="childPayload" />
                }
            }
            break;
        case JSchemaType.Object:
            {
                var childPayload = new Dictionary<string, object>();
                this.Model[property.Key] = childPayload;
                <DynamicInputFormContent Schema="@valueSchema" Model="childPayload" />
            }
            break;
        case JSchemaType.String:
            {
                if(valueSchema.ContentEncoding!=null || valueSchema.ContentMediaType != null)
                {
                    @* var payload = new Dictionary<string, object>();
                    this.Model[property.Key] = childPayload; *@
                    <ExtendedMudField Label="@valueSchema.Title" Variant="Variant.Filled">
                    <MudFileUpload T="IBrowserFile" FilesChanged="(f) => this.Model[property.Key]=f">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload File
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    </ExtendedMudField>
                }
                else
                {
                    <MudTextField Converter="@MudBlazorHelper.StringConverter" @bind-Value="Model[property.Key]" Label="@valueSchema.Title" HelperText="@valueSchema.Description" Required="@valueSchema.Required.Contains(property.Key)" />
                }
            }
            break;
        case JSchemaType.Integer:
            <MudTextField Converter="@MudBlazorHelper.StringConverter" @bind-Value="Model[property.Key]" Label="@valueSchema.Title" HelperText="@valueSchema.Description" Required="@valueSchema.Required.Contains(property.Key)" />
            break;
    }
}
