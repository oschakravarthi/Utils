@inherits MudBaseBindableItemsControl<MudCarouselItem, TData>
@typeparam TData

<section @attributes="UserAttributes" class="@Classname" style="@Style">
    <CascadingValue Value="this">
        <MudSwipeArea OnSwipe="OnSwipe" Class="mud-carousel-swipe">
            @*Selected Content*@
            @if (ItemsSource == null)
            {
                @ChildContent
            }
            else
            {
                foreach (var item in ItemsSource)
                {
                    <MudCarouselItem>
                        @ItemTemplate(item)
                    </MudCarouselItem>
                }
            }
        </MudSwipeArea>

        @*Controls*@
        <div class="d-flex flex-grow-1 align-self-auto">
            @*Left Arrow*@
            @if (ShowArrows)
            {
                @if (PreviousButtonTemplate == null)
                {
                    <MudIconButton tabindex="1" aria-label="Go to previous" Class="@NavigationButtonsClassName" Style="z-index:3;opacity:0.75" Icon="@PreviousIcon" OnClick="PreviousEx" Color="Color.Inherit" />
                }
                else
                {
                    <div @onclick="PreviousEx" tabindex="1" aria-label="Go to previous" class="@NavigationButtonsClassName" style="z-index:3">
                        @PreviousButtonTemplate
                    </div>
                }
            }

            @*Bullets*@
            <div class="@($"flex-grow-1 align-self-{ConvertPosition(BulletsPosition).ToDescriptionString()}")" style="z-index:3">
                @if (ShowBullets)
                {
                    <div class="d-flex justify-center">
                        @for (var i = 0; i < Items.Count; i++)
                        {
                            var current = i;
                            if (BulletTemplate == null)
                            {
                                if (this.ItemLabels == null || this.ItemLabels.Count == 0)
                                {
                                    var i1 = i;
                                    <MudIconButton tabindex="@(i1+3)" aria-label="@(i1+1)" Class="@BulletsButtonsClassName" Style="z-index:3;opacity:0.75" Icon="@(current == SelectedIndex ? CheckedIcon : UncheckedIcon)" OnClick="(() => MoveTo(current))" Color="Color.Inherit" />
                                }
                                else
                                {
                                    var color = current == SelectedIndex ? Color.Primary : Color.Secondary;
                                    color = current == userSelectedIndex ? Color.Success : color;
                                    <div Class="mud-button-root mud-ripple mud-ripple-icon">
                                        <span class="mud-icon-button-label">
                                            <MudChip T="string" Color="@color" Text="@this.ItemLabels[current]" OnClick="(e)=>{MoveToEx(current);}" />
                                        </span>
                                    </div>
                                }
                            }
                            else
                            {
                                void ClickAction() => MoveToEx(current);
                                var arg = new BulletTemplateArg(current, current == SelectedIndex, current == userSelectedIndex, ClickAction);
                                @BulletTemplate(arg)
                            }
                        }
                    </div>
                }
            </div>

            @*Right Arrow*@
            @if (ShowArrows)
            {
                @if (NextButtonTemplate == null)
                {
                    <MudIconButton tabindex="2" aria-label="Go to next" Class="@NavigationButtonsClassName" Style="z-index:3;opacity:0.75" Icon="@NextIcon" OnClick="NextEx" Color="Color.Inherit" />
                }
                else
                {
                    <div @onclick="NextEx" tabindex="2" aria-label="Go to next" class="@NavigationButtonsClassName" style="z-index:3">
                        @NextButtonTemplate
                    </div>
                }
            }
        </div>

    </CascadingValue>
</section>